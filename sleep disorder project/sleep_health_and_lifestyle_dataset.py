# -*- coding: utf-8 -*-
"""sleep_health_and_lifestyle_dataset.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v4Opdmt9wTzQFs4fC03zsfJticiO5eIC
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df=pd.read_csv('Sleep_health_and_lifestyle_dataset.csv')

df

df.shape

df.isnull().sum()

df.drop(['Person ID'],axis=1,inplace=True)

df

df.info()

df['Gender'].value_counts()

df['Occupation'].value_counts()

df['BMI Category'].value_counts()

df['Sleep Disorder'].value_counts().plot(kind='bar')

from sklearn.preprocessing import LabelEncoder

le= LabelEncoder()
df['Occupation'] = le.fit_transform(df['Occupation'])
df['Occupation'].value_counts()

df['Gender'] = le.fit_transform(df['Gender'])
df['Gender'].value_counts()

df['BMI Category'] = le.fit_transform(df['BMI Category'])
df['BMI Category'].value_counts()

df['Sleep Disorder'] = le.fit_transform(df['Sleep Disorder'])
df['Sleep Disorder'].value_counts()

df.info()

df['Upper Blood Pressure']=df['Blood Pressure'].apply(lambda x : int(x.split('/')[0]))
df['lower Blood Pressure']=df['Blood Pressure'].apply(lambda x :int( x.split('/')[1]))

df.drop(['Blood Pressure'],axis=1,inplace=True)

df.info()

df.corr()['Sleep Disorder']

X=df.drop(['Sleep Disorder'],axis=1)
y=df['Sleep Disorder']

from sklearn.model_selection import train_test_split,RandomizedSearchCV,GridSearchCV
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier

X_train,X_test, y_train, y_test = train_test_split(X,y, test_size = 0.2, random_state = 0)

X_train

mms = MinMaxScaler()
X_train_sca = mms.fit_transform(X_train)
X_test_sca = mms.transform(X_test)

knn=KNeighborsClassifier()
knn.fit(X_train_sca,y_train)
knn.score(X_test_sca,y_test)

lr = LogisticRegression()
lr.fit(X_train_sca, y_train)
lr.score(X_test_sca,y_test)

dt=DecisionTreeClassifier()
dt.fit(X_train_sca,y_train)
dt.score(X_test_sca,y_test)

parameters = {'max_depth': [3, 4, 5, 6, 7, 9, 11],
              'min_samples_split': [2, 3, 4, 5, 6, 7],
              'criterion': ['entropy', 'gini']
             }

model = DecisionTreeClassifier()
gridDecisionTree = RandomizedSearchCV(model, parameters, cv = 3, n_jobs = -1)
gridDecisionTree.fit(X_train_sca, y_train)

print('Min Split: ', gridDecisionTree.best_estimator_.min_samples_split)
print('Max maxd: ', gridDecisionTree.best_estimator_.max_depth)
print('Algorithm: ', gridDecisionTree.best_estimator_.criterion)
print('Score: ', gridDecisionTree.best_score_)

decision_tree = DecisionTreeClassifier(criterion = 'entropy', min_samples_split =2, max_depth= 4)
decision_tree.fit(X_train_sca, y_train)
decision_tree.score(X_test_sca,y_test)